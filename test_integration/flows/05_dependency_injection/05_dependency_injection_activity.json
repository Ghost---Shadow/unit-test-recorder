{
  "test_integration/flows/05_dependency_injection/05_dependency_injection.js": {
    "meta": {
      "path": "test_integration/flows/05_dependency_injection/05_dependency_injection.js",
      "mocks": []
    },
    "exportedFunctions": {
      "getPost": {
        "meta": {
          "path": "test_integration/flows/05_dependency_injection/05_dependency_injection.js",
          "name": "getPost",
          "paramIds": [
            "dbClient",
            "postId",
            "redisCache"
          ],
          "injectionWhitelist": [
            "query",
            "pooledQuery",
            "commitSync"
          ],
          "isDefault": false,
          "isEcmaDefault": false,
          "isAsync": true,
          "isObject": false,
          "doesReturnPromise": true
        },
        "captures": [
          {
            "injections": {
              "dbClient.__proto__.query": {
                "captures": [
                  {
                    "params": [],
                    "result": {
                      "title": "content"
                    },
                    "types": {
                      "params": [],
                      "result": "Object"
                    }
                  },
                  {
                    "params": [],
                    "result": {
                      "title": "content"
                    },
                    "types": {
                      "params": [],
                      "result": "Object"
                    }
                  },
                  {
                    "params": [],
                    "result": 42,
                    "types": {
                      "params": [],
                      "result": "Number"
                    }
                  }
                ]
              },
              "redisCache": {
                "captures": [
                  {
                    "params": [],
                    "result": 350,
                    "types": {
                      "params": [],
                      "result": "Number"
                    }
                  },
                  {
                    "params": [],
                    "result": 350,
                    "types": {
                      "params": [],
                      "result": "Number"
                    }
                  }
                ]
              },
              "dbClient.__proto__.__proto__.pool.pooledQuery": {
                "captures": [
                  {
                    "params": [],
                    "result": [
                      {
                        "comment": "comment 1"
                      },
                      {
                        "comment": "comment 2"
                      }
                    ],
                    "types": {
                      "params": [],
                      "result": "Array"
                    }
                  },
                  {
                    "params": [],
                    "result": [
                      {
                        "comment": "comment 1"
                      },
                      {
                        "comment": "comment 2"
                      }
                    ],
                    "types": {
                      "params": [],
                      "result": "Array"
                    }
                  }
                ]
              },
              "dbClient.commitSync": {
                "captures": [
                  {
                    "params": [],
                    "types": {
                      "params": [],
                      "result": "Undefined"
                    }
                  }
                ]
              }
            },
            "params": [
              {},
              1,
              "() => new Promise(resolve => {\n        setTimeout(() => resolve(350));\n      })"
            ],
            "result": {
              "content": {
                "title": "content"
              },
              "comments": [
                {
                  "comment": "comment 1"
                },
                {
                  "comment": "comment 2"
                }
              ],
              "votes": 350,
              "moderator": [
                {
                  "comment": "comment 1"
                },
                {
                  "comment": "comment 2"
                }
              ]
            },
            "types": {
              "params": [
                "Object",
                "Number",
                "Function"
              ],
              "result": "Object"
            }
          }
        ],
        "hashTable": {
          "tGuRwxmWsBEGg4aC0BGKXQ==": true
        }
      },
      "getPostComments": {
        "meta": {
          "path": "test_integration/flows/05_dependency_injection/05_dependency_injection.js",
          "name": "getPostComments",
          "paramIds": [
            "client",
            "postId",
            "redisCache"
          ],
          "injectionWhitelist": [
            "query",
            "pooledQuery",
            "commitSync"
          ],
          "isDefault": false,
          "isEcmaDefault": false,
          "isAsync": true,
          "isObject": false,
          "doesReturnPromise": true
        },
        "captures": [
          {
            "injections": {
              "redisCache": {
                "captures": [
                  {
                    "params": [],
                    "result": 350,
                    "types": {
                      "params": [],
                      "result": "Number"
                    }
                  },
                  {
                    "params": [],
                    "result": 350,
                    "types": {
                      "params": [],
                      "result": "Number"
                    }
                  }
                ]
              },
              "client.__proto__.query": {
                "captures": [
                  {
                    "params": [],
                    "result": 42,
                    "types": {
                      "params": [],
                      "result": "Number"
                    }
                  }
                ]
              },
              "client.__proto__.__proto__.pool.pooledQuery": {
                "captures": [
                  {
                    "params": [],
                    "result": [
                      {
                        "comment": "comment 1"
                      },
                      {
                        "comment": "comment 2"
                      }
                    ],
                    "types": {
                      "params": [],
                      "result": "Array"
                    }
                  },
                  {
                    "params": [],
                    "result": [
                      {
                        "comment": "comment 1"
                      },
                      {
                        "comment": "comment 2"
                      }
                    ],
                    "types": {
                      "params": [],
                      "result": "Array"
                    }
                  }
                ]
              },
              "client.commitSync": {
                "captures": [
                  {
                    "params": [],
                    "types": {
                      "params": [],
                      "result": "Undefined"
                    }
                  }
                ]
              }
            },
            "params": [
              {},
              1,
              "function injectedFunction(...paramsOfInjected) {\n      // https://stackoverflow.com/a/31060154/1217998\n      if (new.target) {\n        markForConstructorInjection(meta); // https://stackoverflow.com/a/47469377/1217998\n\n        return new OldFp(...paramsOfInjected);\n      }\n\n      const clonedParams = shouldRecordStubParams() ? _.cloneDeep(paramsOfInjected) : [];\n      const result = OldFp.apply(this, paramsOfInjected);\n\n      if (result && _.isFunction(result.then)) {\n        // It might be a promise\n        result.then(res => {\n          injectedFunction.boundRecorder(clonedParams, res);\n        });\n      } else {\n        injectedFunction.boundRecorder(clonedParams, result);\n      }\n\n      return result;\n    }"
            ],
            "result": [
              {
                "comment": "comment 1"
              },
              {
                "comment": "comment 2"
              }
            ],
            "types": {
              "params": [
                "Object",
                "Number",
                "Function"
              ],
              "result": "Array"
            }
          }
        ],
        "hashTable": {
          "Dgg0jeDDQP8zc2NeezgDUg==": true
        }
      }
    }
  }
}